name: 'Terraform'

on:
  push:
    branches:
    - master
  pull_request:
  workflow_dispatch:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      working-directory: AZ/tf

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Instal AZ cli
    - name: az cli install
      run: curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
      working-directory: AZ/tf
     

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend-config=backends\backend.hcl
      working-directory: AZ/tf
      env:
        ARM_CLIENT_ID : ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET : ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID : ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID : ${{ secrets.ARM_TENANT_ID }}      

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan
      working-directory: AZ/tf
      env:
        ARM_CLIENT_ID : ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET : ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID : ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID : ${{ secrets.ARM_TENANT_ID }}       

      # On push to master, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: AZ/tf
      env:
        ARM_CLIENT_ID : ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET : ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID : ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID : ${{ secrets.ARM_TENANT_ID }}         
